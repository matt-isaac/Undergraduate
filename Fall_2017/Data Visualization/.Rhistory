?nae
?name
name(max(x))
?dplyr
??dplyr
installed.packages()
install.packages(dplyr)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("Rcpp")
read.table("athletes2016.txt")
?colnames()
athletes = read.table("athletes2016.txt")
colnames(athletes, do.NULL = FALSE)
colnames(athletes) <- cnames
cnames = c("Country", "NumAthletes", "NumGold", "NumSilver", "NumBronze", "NumTotal")
colnames(athletes) <- cnames
View(athletes)
?sort
mostAthletes = sort(athletes$NumAthletes, decreasing = TRUE)
sorted_by_athletes <- athletes[order(NumAthletes),]
sorted_by_athletes <- athletes[order(athletes$NumAthletes),]
View(sorted_by_athletes)
sorted_by_athletes <- athletes[order(-athletes$NumAthletes),]
View(sorted_by_athletes)
most_athletes_15 <- sorted_by_athletes$Country[,1:15]
most_athletes_15 <- sorted_by_athletes$Country[1:15,]
most_athletes_15 <- sorted_by_athletes$Country[1:15]
View(athletes)
View(sorted_by_athletes)
sorted_by_medals <- athletes[order(-athletes$NumTotal),]
most_medals_15 <- sorted_by_medals$Country[1:15]
View(sorted_by_medals)
cor(athletes$NumAthletes, athletes$NumTotal)
plot(athletes$NumAthletes, athletes$NumTotal)
plot(athletes$NumAthletes, athletes$NumTotal)
plot(athletes$NumAthletes, athletes$NumTotal)
cor(athletes$NumAthletes, athletes$NumTotal)
plot(athletes$NumAthletes, athletes$NumTotal)
population = c(325771000, 1386390000, 65648100, 146787329, 67080000, 82800000, 126750000, 24654000, 36660000,60532325, 51446201, 208003000, 17155200, 9843031, 44044811)
plot(population, sorted_by_medals$NumTotal[1:15])
plot(population, sorted_by_medals$NumTotal[1:15])
cor(population, sorted_by_medals$NumTotal[1:15])
ratios = sorted_by_medals$NumTotal[1:15]/population
sorted_by_medals
sorted_by_medals$Country[1:15]
sorted_by_medals$Country[1]
sorted_by_medals$Country[1:15]
table(sorted_by_medals$Country[1:15], round(ratios,3))
round(ratios,3)
ratios
table(ratios)
?scientific
?Scientific()
?Scientific
??Scientific
install.packages('"scales"')
round(ratios[,1],7)
round(ratios[1],7)
ratios_1000000 = ratios * 1000000
plot(population, ratios*1000000)
plot(population, sorted_by_athletes$NumAthletes[1:15])
colors()
?lapply
?hist
X <- c(rep(65, times=5), rep(25, times=5), rep(35, times=10), rep(45, times=4))
hist(X, prob=TRUE)            # prob=TRUE for probabilities not counts
lines(density(X))             # add a density estimate with defaults
lines(density(X, adjust=2), lty="dotted")
x <- rnorm(100)
plot(x)
hist(x)
lines(density(x))
hist(x, freq = FALSE)
lines(density(x))
x <- rnorm(100)
hist(x, freq = FALSE)
hist(x, freq = FALSE)
x <- rnorm(100)
x <- rnorm(100)
hist(x, freq = FALSE)
lines(density(x))
?lines
points(density(x))
hist(x, freq = FALSE)
points(density(x))
hist(x, freq = FALSE)
?pchisq
pchisq(5.272, 6, lower.tail = FALSE)
pchisq(0.3007, 1, lower.tail = FALSE)
pchisq(2.3831, 2, lower.tail = FALSE)
pchisq(5.5810, 3, lower.tail = FALSE)
exp(0.8724)
pchisq(7.0963, 1, lower.tail = FALSE)
install.packages("microbenchmark")
search()
?na.rm
?na.rm()
??na.rm()
?rm()
x = rnorm(1000)
qqnorm(x)
x = rnorm(1000)
qqnorm(x)
pchisq(7.0963, 1, lower.tail = FALSE)
pchisq(8.5237, 16, lower.tail = FALSE)
pchisq(31.6695, 48, lower.tail = FALSE)
pchisq(34.1026, 52, lower.tail = FALSE)
pchisq(39.4112, 56, lower.tail = FALSE)
pchisq(7.0963, 1, lower.tail = FALSE)
pchisq(10.1617, 5, lower.tail = FALSE)
pchisq(10.1797, 6, lower.tail = FALSE)
exp(0.3219)
exp(-0.5585)
exp(1.4275)
x = 1.1597 - 1.4889 - 0.6443 + 1.4275
x
exp(x)
knitr::opts_chunk$set(echo = TRUE)
alldata <- read.csv("all.csv", header = T)
num_univ_eda = function(x, hist=TRUE, box=TRUE, ...)
{
if(hist == TRUE)
{
hist(x, ...)
}
if(box == TRUE)
{
boxplot(x, ...)
}
}
num_vars = c=list(alldata$MathACT, alldata$EnglACT, alldata$GPA)
lapply(num_vars, FUN = num_univ_eda)
num_vars =list(alldata$MathACT, alldata$EnglACT, alldata$GPA)
lapply(num_vars)
lapply(num_vars, FUN = num_univ_eda)
apply(num_vars, FUN = num_univ_eda)
cat_vars = list(alldata$GRADE, alldata$course, alldata$sex, alldata$firstlang, alldata$rank, alldata$major, alldata$employed)
cat_univ_eda = function(x, bar=TRUE, pie=TRUE, ...)
{
if(bar == TRUE)
{
hist(summary(x), ...)
}
if(pie == TRUE)
{
pie(summary(x), ...)
}
}
num_vars =data.frame(alldata$MathACT, alldata$EnglACT, alldata$GPA, alldata$Final.Exam, alldata$Final.Score, alldata$birthyear)
cat_vars = data.frame(alldata$GRADE, alldata$course, alldata$sex, alldata$firstlang, alldata$rank, alldata$major, alldata$employed)
lapply(num_vars, FUN = num_univ_eda())
lapply(x = num_vars, FUN = num_univ_eda())
sapply(x = num_vars, FUN = num_univ_eda())
apply(x = num_vars, FUN = num_univ_eda())
num_vars <- data.frame(alldata$MathACT, alldata$EnglACT, alldata$GPA, alldata$Final.Exam, alldata$Final.Score, alldata$birthyear)
apply(x = num_vars, FUN = num_univ_eda())
lapply(x = num_vars, FUN = num_univ_eda())
num_univ_eda(alldata$MathACT)
num_univ_eda(alldata$MathACT)
num_univ_eda(alldata$MathACT, main = 'Histogram of MathACT')
num_univ_eda(alldata$MathACT, main = 'MathACT')
num_univ_eda(alldata$EnglACT, main = 'EnglACT')
num_univ_eda(alldata$GPA, main = 'GPA')
num_univ_eda(alldata$Final.Exam, main = 'Final.Exam')
num_univ_eda(alldata$Final.score, main = 'Final.Score')
num_univ_eda(alldata$MathACT, main = 'MathACT')
num_univ_eda(alldata$EnglACT, main = 'EnglACT')
num_univ_eda(alldata$GPA, main = 'GPA')
num_univ_eda(alldata$Final.Exam, main = 'Final.Exam')
num_univ_eda(alldata$Final.score, main = 'Final.Score')
num_univ_eda(alldata$birthyear, 'Birthyear')
num_univ_eda(alldata$birthyear, main = 'Birthyear')
num_univ_eda(alldata$MathACT, main = 'MathACT')
num_univ_eda(alldata$EnglACT, main = 'EnglACT')
num_univ_eda(alldata$GPA, main = 'GPA')
num_univ_eda(alldata$Final.Exam, main = 'Final.Exam')
num_univ_eda(alldata$Final.score, main = 'Final.Score')
num_univ_eda(alldata$Final.Score, main = 'Final.Score')
cat_vars_eda(alldata$GRADE, main = 'GRADE')
cat_univ_eda(alldata$GRADE, main = 'GRADE')
cat_univ_eda = function(x, bar=TRUE, pie=TRUE, ...)
{
if(bar == TRUE)
{
barplot(summary(x), ...)
}
if(pie == TRUE)
{
pie(summary(x), ...)
}
}
cat_univ_eda(alldata$GRADE, main = 'GRADE')
cat_univ_eda(alldata$GRADE, main = 'GRADE')
cat_univ_eda(alldata$GRADE, main = 'GRADE')
cat_univ_eda(alldata$course, main = 'Course')
cat_univ_eda(alldata$sex, main = 'Sex')
cat_univ_eda(alldata$firstlang, main = 'firstlang')
cat_univ_eda(alldata$rank, main = 'Rank')
cat_univ_eda(alldata$major, main = 'Major')
cat_univ_eda(alldata$employed, main = 'Employed')
pairs(num_vars)
pairs(num_vars)
knitr::opts_chunk$set(echo = TRUE)
centralLimit = function(nreps, nobs, trials, ps, hist = FALSE, qqnorm = FALSE, ...)
{
binomSamps = lapply(rep(nobs,nreps), rbinom, size=trials, prob=ps)
mymeans = sapply(binomSamps, mean)
if (hist == TRUE)
{
hist(mymeans, freq=FALSE, ...)
}
if (qqnorm == TRUE)
{
qqnorm(mymeans, ...)
}
}
centralLimit(nreps = 100000, nobs = 5, trial = 5, ps = 0.1, hist = TRUE, qqnorm = TRUE)
centralLimit(nreps = 100000, nobs = 10, trial = 5, ps = 0.1, hist = TRUE, qqnorm = TRUE)
centralLimit(nreps = 100000, nobs = 50, trial = 5, ps = 0.1, hist = TRUE, qqnorm = TRUE)
centralLimit(nreps = 100000, nobs = 100, trial = 5, ps = 0.1, hist = TRUE, qqnorm = TRUE)
centralLimit(nreps = 100000, nobs = 500, trial = 5, ps = 0.1, hist = TRUE, qqnorm = TRUE)
pchisq(2.789,1,lower.tail = FALSE)
pchisq(2.8496,2,lower.tail = FALSE)
install.packages("ggplot2")
install.packages("lattice")
anscombe
mean(anscombe$x1)
mean(anscombe$x2)
mean(anscombe$x3)
mean(anscombe$x4)
mean(anscombe$y1)
mean(anscombe$y2)
mean(anscombe$y3)
mean(anscombe$y4)
pchisq(152.6136,41,lower.tail = F)
pchisq(25.0537,27,lower.tail = F)
pchisq(33.3032,33,lower.tail = F)
pchisq(33.8389,1,lower.tail=FALSE)
install.packages("ggplot2")
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(dplyr)
library(GGally)
library(vcd)
library(extracat)
library(GDAdata)
library(plotly)
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
jpeg("Speedski.jpg")
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
dev.off()
jpeg("Speedski.jpg")
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
dev.off()
setwd("D:/Academic/Fall 2017/Data Visualization")
jpeg("Speedski.jpg")
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
dev.off()
##Libraries
#Order matters when loading libraries
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(dplyr)
library(GGally)
library(vcd)
library(extracat)
library(GDAdata)
library(plotly)
##Settings
palette("default")
update_geom_defaults("bar", list(fill = "grey70", colour = "grey40"))
scale_colour_discrete <- function(...) scale_colour_brewer(..., palette = "Set2")
scale_fill_discrete <- function(...) scale_fill_colorblind()
auTheme <- theme_grey()  +
theme(panel.background = element_rect(colour = NA, fill = "grey90")) +
theme(plot.background = element_rect(colour = NA, fill = "grey90")) +
theme(legend.background = element_rect(fill = "grey90")) +
theme(plot.title = element_text(vjust = 2))
theme_set(auTheme)
## ----speedski---- Fig 1.1
data(SpeedSki, package = "GDAdata")
# step-by-step
# basic first graphic
ggplot(SpeedSki, aes(x = Speed)) +
geom_histogram()
# adjust range of x-axis
summary(SpeedSki$Speed)
ggplot(SpeedSki, aes(x = Speed)) +
xlim(160, 220) +
geom_histogram()
# Bins are too small - too many bins with 0 and/or 1 observations in them. Widen bin width.
# adjust binwidth
ggplot(SpeedSki, aes(x = Speed)) +
xlim(160, 220) +
geom_histogram(binwidth = 2.5)
# add axis labels
ggplot(SpeedSki, aes(x = Speed)) +
xlim(160, 220) +
geom_histogram(binwidth = 2.5) +
xlab("Speed (km/hr)") +
ylab("")
# facet_wrap can condition on another variable.
# ncol = 1: Stacks graph instead of side by side
# condition on gender in 2 related histograms (small multiples!)
ggplot(SpeedSki, aes(x = Speed)) +
xlim(160, 220) +
geom_histogram(binwidth = 2.5) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1)
# use color as a distinction for gender
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
geom_histogram(binwidth = 2.5) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1)
# omit legend = code from the book
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
geom_histogram(binwidth = 2.5) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
# We still don't have the same graph, the bins are not centered the same.
# final result in book
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
# further adjust y-axis range
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
# further adjust y-axis ticks & gridlines
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
# interactive version
ggplotly()
# save as external jpg file
jpeg("Speedski.jpg")
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
dev.off()
# save as external pdf file
pdf("Speedski.pdf")
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
dev.off()
## BaseR
# basic first graphic
hist(SpeedSki$Speed)
# adjust range of x-axis & binwidth
hist(SpeedSki$Speed,
breaks = seq(160, 220, by = 2.5))
# add axis labels
hist(SpeedSki$Speed,
breaks = seq(160, 220, by = 2.5),
xlab = "Speed (km/hr)",
ylab = "")
# condition on gender in 2 related histograms (small multiples!)
hist(SpeedSki$Speed[SpeedSki$Sex == "Female"],
breaks = seq(160, 220, by = 2.5),
xlab = "Speed (km/hr)",
ylab = "")
hist(SpeedSki$Speed[SpeedSki$Sex == "Male"],
breaks = seq(160, 220, by = 2.5),
xlab = "Speed (km/hr)",
ylab = "")
# combine into 1 figure
op <- par(no.readonly = TRUE) # save original graphical parameters
par(mfrow = c(2, 1))
hist(SpeedSki$Speed[SpeedSki$Sex == "Female"],
breaks = seq(160, 220, by = 2.5),
xlab = "Speed (km/hr)",
ylab = "")
hist(SpeedSki$Speed[SpeedSki$Sex == "Male"],
breaks = seq(160, 220, by = 2.5),
xlab = "Speed (km/hr)",
ylab = "")
# add individual main titles
par(mfrow = c(2, 1))
hist(SpeedSki$Speed[SpeedSki$Sex == "Female"],
breaks = seq(160, 220, by = 2.5),
xlab = "Speed (km/hr)",
ylab = "",
main = "Female")
hist(SpeedSki$Speed[SpeedSki$Sex == "Male"],
breaks = seq(160, 220, by = 2.5),
xlab = "Speed (km/hr)",
ylab = "",
main = "Male")
# adjust y-axis to common scale (small multiples!)
par(mfrow = c(2, 1))
hist(SpeedSki$Speed[SpeedSki$Sex == "Female"],
breaks = seq(160, 220, by = 2.5),
ylim = c(0, 12),
xlab = "Speed (km/hr)",
ylab = "",
main = "Female")
hist(SpeedSki$Speed[SpeedSki$Sex == "Male"],
breaks = seq(160, 220, by = 2.5),
ylim = c(0, 12),
xlab = "Speed (km/hr)",
ylab = "",
main = "Male")
# reduce outer margins # c(bottom, left, top, right)
par(mfrow = c(2, 1),
oma = c(0, 0, 0, 0))
hist(SpeedSki$Speed[SpeedSki$Sex == "Female"],
breaks = seq(160, 220, by = 2.5),
ylim = c(0, 12),
xlab = "Speed (km/hr)",
ylab = "",
main = "Female")
hist(SpeedSki$Speed[SpeedSki$Sex == "Male"],
breaks = seq(160, 220, by = 2.5),
ylim = c(0, 12),
xlab = "Speed (km/hr)",
ylab = "",
main = "Male")
# reduce inner margins # c(bottom, left, top, right)
par(mfrow = c(2, 1),
oma = c(0, 0, 0, 0),
mar = c(5, 3, 1, 0))
hist(SpeedSki$Speed[SpeedSki$Sex == "Female"],
breaks = seq(160, 220, by = 2.5),
ylim = c(0, 12),
xlab = "Speed (km/hr)",
ylab = "",
main = "Female")
hist(SpeedSki$Speed[SpeedSki$Sex == "Male"],
breaks = seq(160, 220, by = 2.5),
ylim = c(0, 12),
xlab = "Speed (km/hr)",
ylab = "",
main = "Male")
par(op) # reset par for future graphics
ggplot(SpeedSki, aes(x = Speed, fill = Sex)) +
xlim(160, 220) +
ylim(0, 12) +
scale_y_continuous(breaks = seq(0, 12, 2)) +
geom_histogram(binwidth = 2.5, center = 1.25) +
xlab("Speed (km/hr)") +
ylab("") +
facet_wrap(~ Sex, ncol = 1) +
theme(legend.position = "none")
